# File automatically generated by RBNF.
from rtpy.cmd_ast import *
from rbnf.bootstrap import loader as ruiko
ulang = ruiko.Language('ulang')


@ulang
class Space(ruiko.Lexer):
    @staticmethod
    def regex():
        return ['\\s+']


@ulang
class Str(ruiko.Lexer):
    @staticmethod
    def regex():
        return ["[A-Z]\\'([^\\\\\\']+|\\\\.)*?\\'|\\'([^\\\\\\']+|\\\\.)*?\\'"]


@ulang
class DoubleQuotedStr(ruiko.Lexer):
    @staticmethod
    def regex():
        return ['[A-Z]"([^\\\\"]+|\\\\.)*?"|"([^\\\\"]+|\\\\.)*?"']


@ulang
class arg(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.Or([
            ruiko.Bind('str', ruiko.N('Str')),
            ruiko.Bind('str', ruiko.N('DoubleQuotedStr')),
            ruiko.Bind('pat', ruiko.N('pattern')),
            ruiko.Bind('expr', ruiko.Named('quote')),
            ruiko.Bind('expr', ruiko.Named('closure')),
            ruiko.Bind('expr', ruiko.Named('placeholder'))
        ])

    @staticmethod
    def rewrite(state):
        (str, str, pat, expr, expr, expr) = map(
            state.ctx.get, ('str', 'str', 'pat', 'expr', 'expr', 'expr'))
        if expr:
            return expr
        if str:
            return eval(str.value)
        return pat.value


@ulang
class placeholder(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And([ruiko.C('$'), ruiko.Bind('arg', ruiko.Named('arg'))])

    @staticmethod
    def rewrite(state):
        (arg, ) = map(state.ctx.get, ('arg', ))
        return PlaceHolder(arg)


@ulang
class quote(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And([
            ruiko.C('`'),
            ruiko.Bind('cmd', ruiko.Named('command')),
            ruiko.C('`')
        ])

    @staticmethod
    def rewrite(state):
        (cmd, ) = map(state.ctx.get, ('cmd', ))
        return Quote(cmd)


@ulang
class flag(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And(
            [ruiko.C('--'),
             ruiko.Bind('key', ruiko.N('pattern'))])

    @staticmethod
    def fail_if(tokens, state):
        (key, ) = map(state.ctx.get, ('key', ))
        return key.value.isidentifier()

    @staticmethod
    def rewrite(state):
        (key, ) = map(state.ctx.get, ('key', ))
        return (key.value, True)


@ulang
class must(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And([
            ruiko.C('-'),
            ruiko.Bind('key', ruiko.N('pattern')),
            ruiko.Bind('value', ruiko.Named('arg'))
        ])

    @staticmethod
    def fail_if(tokens, state):
        (key, value) = map(state.ctx.get, ('key', 'value'))
        return key.value.isidentifier()

    @staticmethod
    def rewrite(state):
        (key, value) = map(state.ctx.get, ('key', 'value'))
        return (key.value, value)


@ulang
class closure(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And([
            ruiko.C('{'),
            ruiko.Seq(
                ruiko.And([
                    ruiko.Push('stmts', ruiko.Named('command')),
                    ruiko.Seq(
                        ruiko.And([
                            ruiko.C(';'),
                            ruiko.Push('stmts', ruiko.Named('command'))
                        ]), 0, -1)
                ]), 0, 1),
            ruiko.Seq(ruiko.C(';'), 0, 1),
            ruiko.C('}')
        ])

    @staticmethod
    def rewrite(state):
        (stmts, stmts) = map(state.ctx.get, ('stmts', 'stmts'))
        return Closure(stmts)


@ulang
class command(ruiko.Parser):
    @staticmethod
    def bnf():
        return ruiko.And([
            ruiko.Bind('instruction', ruiko.Named('arg')),
            ruiko.Seq(
                ruiko.Or(
                    [
                        ruiko.Push('args',
                                   ruiko.Bind('last', ruiko.Named('arg'))),
                        ruiko.Push('kwargs',
                                   ruiko.Bind('last', ruiko.Named('flag'))),
                        ruiko.Push('kwargs',
                                   ruiko.Bind('last', ruiko.Named('must')))
                    ]), 0, -1),
            ruiko.Seq(
                ruiko.And([
                    ruiko.C('|'),
                    ruiko.Bind('and_then', ruiko.Named('command'))
                ]), 0, 1)
        ])

    @staticmethod
    def rewrite(state):
        (instruction, args, last, kwargs, last, kwargs, last, and_then) = map(
            state.ctx.get, ('instruction', 'args', 'last', 'kwargs', 'last',
                            'kwargs', 'last', 'and_then'))
        while (isinstance(last, Cmd) and isinstance(last.last, Cmd)):
            last = last.last
        ret = Cmd(instruction, args, kwargs, last)
        if and_then:
            args = (and_then.args or ())
            ret = Cmd(and_then.inst, (ret, *args), and_then.kwargs,
                      and_then.last)
        return ret


@ulang
class pattern(ruiko.Lexer):
    @staticmethod
    def regex():
        return ['[^`\\s\\{\\}\\;]+']


@ulang
class Newline(ruiko.Lexer):
    @staticmethod
    def constants():
        return ['\n']


ulang.ignore('Space', 'Newline')
ulang.build()
